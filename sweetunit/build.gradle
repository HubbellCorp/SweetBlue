import java.util.zip.ZipEntry
import java.util.zip.ZipInputStream

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

version = ext.appVersionName

configurations {
    javadocDeps
}

android {

    defaultConfig {
        minSdkVersion 18
        project.archivesBaseName = "SweetUnit"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        beta {
            initWith buildTypes.release
        }
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
    lint {
        lintConfig file('../lint.xml')
    }
    namespace 'com.idevicesinc.sweetblue.unit'
}

repositories {
    mavenCentral()
    google()
}

dependencies {
    implementation project(':library')
    implementation 'junit:junit:4.13.2'
    implementation 'androidx.test.ext:junit:1.1.5'
    implementation 'androidx.test:rules:1.5.0'
    implementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'androidx.test.uiautomator:uiautomator:2.2.0'

    javadocDeps 'junit:junit:4.13.2'
    javadocDeps 'androidx.test.ext:junit:1.1.5'
    javadocDeps 'androidx.test:rules:1.5.0'
    javadocDeps 'androidx.test.espresso:espresso-core:3.5.1'
    javadocDeps 'androidx.test.uiautomator:uiautomator:2.2.0'
}

afterEvaluate {
    // Need to pull the boot classpath from project.android, and it needs to be in afterEvaluate
    // So, update the gendocs task classpath with the value here
    tasks.gendocs.classpath += files(project.android.getBootClasspath())
    tasks.gendocs.classpath += project(':library').tasks.sourcesJar.outputs.getFiles()
    def tmpDir = new File(project.buildDir, "tmpAar")
    if (tmpDir.exists()) tmpDir.delete()
    tmpDir.mkdirs()
    configurations.javadocDeps.forEach {
        if (it.name.endsWith(".aar")) {
            extractClassesJar(it, tmpDir)
        } else {
            tasks.gendocs.classpath += fileTree(it)
        }
    }
    tasks.gendocs.classpath += fileTree(tmpDir)
    tasks.gendocs.classpath += files(configurations.javadocDeps)
}

// Generate javadocs
tasks.register('gendocs', Javadoc) {
    failOnError false
    String path = rootProject.projectDir.absolutePath + "/scripts/assets/v3_style.css"
    options.stylesheetFile = new File(path)
    options.windowTitle = "SweetUnit"
    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.author = true
    options.links('https://developer.android.com/reference')
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    String v = "${SEMVER}"
    version = v.replace("_", '.')
    options.setDocTitle("SweetUnit " + version + " API")
    destinationDir = file("${rootDir.absolutePath}/javadocs/sweetunit/api")
    source = android.sourceSets.main.java.sourceFiles
    group = "sweetunit"
}

// Create javadoc jar file
tasks.register('sbjavadocJar', Jar) {
    dependsOn gendocs
    from gendocs.destinationDir
    archiveFileName = getJavadocJarName("sweetunit")
    archiveClassifier.set("javadoc")
    destinationDirectory = new File(getJarDir())
    group = "sweetunit"
    description = "Generates the javadoc jar."
}


//////////////////////////////////////////////
//              Publishing Config           //
//////////////////////////////////////////////
android {
    compileSdk 34
    publishing {
        singleVariant('release') {
            withSourcesJar()
        }
    }
}

publishing {
    publications {
        sweetBluePublication(MavenPublication) {
            groupId 'com.idevicesinc'
            artifactId 'sweetunit'
            version "${version}"
            afterEvaluate {
                from components.release
            }
            artifact sbjavadocJar
        }
    }

    repositories {
        maven {
            url "https://pkgs.dev.azure.com/ideviceshub/SweetBlue/_packaging/sweetblue3/maven/v1"
            credentials {
                username "sweetblue"
                password System.getenv("AZURE_ARTIFACTS_ENV_ACCESS_TOKEN")
            }
        }
    }
}


def static extractClassesJar(File archive, File tmpDir) {
    byte[] buffer = new byte[1024]
    ZipInputStream zis = new ZipInputStream(new FileInputStream(archive.absolutePath))
    ZipEntry zipEntry = zis.getNextEntry()
    while (zipEntry != null) {
        if (zipEntry.name.equalsIgnoreCase("classes.jar")) {
            def classFile = new File(tmpDir, archive.name.replace(".aar", ".jar"))
            FileOutputStream fos = new FileOutputStream(classFile)
            int len
            while ((len = zis.read(buffer)) > 0) {
                fos.write(buffer, 0, len)
            }
            fos.close()
        }
        zipEntry = zis.getNextEntry()
    }
    zis.closeEntry()
    zis.close()
}